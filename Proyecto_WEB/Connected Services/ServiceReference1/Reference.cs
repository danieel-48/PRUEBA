//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_WEB.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Consultar", ReplyAction="http://tempuri.org/IService1/ConsultarResponse")]
        Datos.Consultar_Persona_Result[] Consultar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Consultar", ReplyAction="http://tempuri.org/IService1/ConsultarResponse")]
        System.Threading.Tasks.Task<Datos.Consultar_Persona_Result[]> ConsultarAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Registrar", ReplyAction="http://tempuri.org/IService1/RegistrarResponse")]
        bool Registrar(string Nombre, System.DateTime Fecha_nacimiento, string Sexo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Registrar", ReplyAction="http://tempuri.org/IService1/RegistrarResponse")]
        System.Threading.Tasks.Task<bool> RegistrarAsync(string Nombre, System.DateTime Fecha_nacimiento, string Sexo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Actualizar", ReplyAction="http://tempuri.org/IService1/ActualizarResponse")]
        bool Actualizar(long CodPersona, string Nombre, System.DateTime Fecha_nacimiento, string Sexo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Actualizar", ReplyAction="http://tempuri.org/IService1/ActualizarResponse")]
        System.Threading.Tasks.Task<bool> ActualizarAsync(long CodPersona, string Nombre, System.DateTime Fecha_nacimiento, string Sexo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Eliminar", ReplyAction="http://tempuri.org/IService1/EliminarResponse")]
        bool Eliminar(long CodPersona);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Eliminar", ReplyAction="http://tempuri.org/IService1/EliminarResponse")]
        System.Threading.Tasks.Task<bool> EliminarAsync(long CodPersona);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Proyecto_WEB.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Proyecto_WEB.ServiceReference1.IService1>, Proyecto_WEB.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Datos.Consultar_Persona_Result[] Consultar() {
            return base.Channel.Consultar();
        }
        
        public System.Threading.Tasks.Task<Datos.Consultar_Persona_Result[]> ConsultarAsync() {
            return base.Channel.ConsultarAsync();
        }
        
        public bool Registrar(string Nombre, System.DateTime Fecha_nacimiento, string Sexo) {
            return base.Channel.Registrar(Nombre, Fecha_nacimiento, Sexo);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrarAsync(string Nombre, System.DateTime Fecha_nacimiento, string Sexo) {
            return base.Channel.RegistrarAsync(Nombre, Fecha_nacimiento, Sexo);
        }
        
        public bool Actualizar(long CodPersona, string Nombre, System.DateTime Fecha_nacimiento, string Sexo) {
            return base.Channel.Actualizar(CodPersona, Nombre, Fecha_nacimiento, Sexo);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarAsync(long CodPersona, string Nombre, System.DateTime Fecha_nacimiento, string Sexo) {
            return base.Channel.ActualizarAsync(CodPersona, Nombre, Fecha_nacimiento, Sexo);
        }
        
        public bool Eliminar(long CodPersona) {
            return base.Channel.Eliminar(CodPersona);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarAsync(long CodPersona) {
            return base.Channel.EliminarAsync(CodPersona);
        }
    }
}
